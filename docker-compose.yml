version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: creatorhub_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: creatorhub
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: creatorhub_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: creatorhub_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; print(requests.get('http://localhost:8000/health').status_code)" ]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: creatorhub_celery_worker
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: creatorhub_celery_beat
    restart: unless-stopped
    command: celery -A app.core.celery_app beat --loglevel=info
    env_file:
      - .env
    volumes:
      - ./backend:/app
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:


networks:
  default:
    name: creatorhub_network
